<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Liga de 40 Equipos ‚Äî 200/0/100</title>
  <style>
    :root { --bg:#0f172a; --card:#111827; --muted:#94a3b8; --text:#e5e7eb; --accent:#22c55e; --danger:#ef4444; --ring:#38bdf8; }
    *{box-sizing:border-box}
    body { margin:0; font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, Noto Sans, "Helvetica Neue", Arial, "Apple Color Emoji", "Segoe UI Emoji"; background:linear-gradient(120deg,#0b1023,#0f172a 30%,#0b132f); color:var(--text); }
    header{position:sticky;top:0;z-index:5;background:rgba(17,24,39,.8);backdrop-filter:blur(8px);border-bottom:1px solid #1f2937}
    .wrap{max-width:1100px;margin:0 auto;padding:18px}
    h1{margin:0;font-size:1.4rem;display:flex;gap:12px;align-items:center}
    .pill{font-size:.75rem;color:#0f172a;background:#a7f3d0;padding:2px 8px;border-radius:999px;font-weight:700}
    main{display:grid;grid-template-columns:1.05fr .95fr;gap:18px;padding:18px;max-width:1100px;margin:0 auto}
    @media (max-width: 980px){ main{grid-template-columns:1fr} }
    .card{background:var(--card);border:1px solid #1f2937;border-radius:14px;box-shadow:0 6px 22px rgba(0,0,0,.35)}
    .card h2{margin:0 0 6px 0;font-size:1.05rem}
    .card .body{padding:16px}
    .row{display:flex;gap:10px;align-items:center;flex-wrap:wrap}
    select, input[type="text"], input[type="password"]{background:#0b1220;border:1px solid #1f2937;color:var(--text);padding:10px 12px;border-radius:10px;outline:none}
    select:focus, input:focus{border-color:var(--ring);box-shadow:0 0 0 3px rgba(56,189,248,.15)}
    button{border:0;background:#334155;color:var(--text);padding:10px 14px;border-radius:10px;cursor:pointer;transition:.15s}
    button:hover{filter:brightness(1.1)}
    .primary{background:#16a34a}
    .ghost{background:transparent;border:1px solid #334155}
    .danger{background:var(--danger)}
    .grid{display:grid;gap:10px}
    .cols-3{grid-template-columns:1fr 1fr 1fr}
    .cols-2{grid-template-columns:1fr 1fr}
    .muted{color:var(--muted)}
    table{width:100%;border-collapse:collapse}
    thead th{position:sticky;top:0;background:#0b1220;padding:10px;font-weight:700;border-bottom:1px solid #1f2937}
    tbody td{padding:10px;border-bottom:1px solid #1f2937}
    tbody tr:hover{background:#0b1220}
    .right{text-align:right}
    .center{text-align:center}
    .tag{font-size:.7rem;background:#0b1220;border:1px solid #1f2937;padding:2px 8px;border-radius:999px}
    .admin-badge{font-size:.75rem;color:#22c55e;border:1px solid #14532d;background:#052e1a;padding:2px 8px;border-radius:999px}
    .stack{display:flex;flex-direction:column;gap:10px}
    .history{max-height:260px;overflow:auto;border-top:1px dashed #1f2937;margin-top:10px;padding-top:10px}
    .small{font-size:.85rem}
    .name-btn{background:transparent;border:1px dashed #374151;padding:4px 8px;border-radius:8px;cursor:pointer}
    .footer{opacity:.7;font-size:.8rem;margin-top:6px}
  </style>
</head>
<body>
  <header>
    <div class="wrap row" style="justify-content:space-between">
      <h1>‚öΩ Liga de 40 Equipos <span class="pill">200 / 0 / 100</span></h1>
      <div class="row">
        <span id="adminState" class="tag">Modo visitante</span>
        <button id="toggleAdmin" class="ghost">Entrar como admin</button>
      </div>
    </div>
  </header>

  <main>
    <!-- Panel de partido -->
    <section class="card">
      <div class="body">
        <h2>Registrar resultado</h2>
        <p class="muted small">Selecciona dos equipos diferentes. Como <strong>admin</strong> podr√°s marcar ganador o empate y se sumar√°n puntos autom√°ticamente.</p>
        <div class="grid cols-2" style="margin-top:10px">
          <div class="stack">
            <label for="teamA" class="muted small">Equipo A</label>
            <select id="teamA"></select>
          </div>
          <div class="stack">
            <label for="teamB" class="muted small">Equipo B</label>
            <select id="teamB"></select>
          </div>
        </div>
        <div class="row" style="margin-top:12px">
          <button id="btnAWin" class="primary" title="A gana (A +200 / B +0)" disabled>üèÜ Gana A (+200)</button>
          <button id="btnDraw" class="ghost" title="Empate (A +100 / B +100)" disabled>ü§ù Empate (+100/+100)</button>
          <button id="btnBWin" class="primary" title="B gana (B +200 / A +0)" disabled>üèÜ Gana B (+200)</button>
        </div>
        <div class="history" id="history"></div>
      </div>
    </section>

    <!-- Tabla de posiciones -->
    <section class="card">
      <div class="body">
        <div class="row" style="justify-content:space-between;align-items:center">
          <h2>Tabla de posiciones</h2>
          <div class="row">
            <button id="renameTeams" class="ghost" title="Renombrar equipos">‚úèÔ∏è Nombres</button>
            <button id="exportBtn" class="ghost" title="Exportar JSON">‚¨áÔ∏è Exportar</button>
            <input type="file" id="importFile" accept="application/json" style="display:none" />
            <button id="importBtn" class="ghost" title="Importar JSON">‚¨ÜÔ∏è Importar</button>
            <button id="resetBtn" class="danger" title="Borrar puntos y reiniciar">‚ôªÔ∏è Reiniciar</button>
          </div>
        </div>
        <table id="table">
          <thead>
            <tr>
              <th>#</th>
              <th>Equipo</th>
              <th class="right">Puntos</th>
              <th class="center">PJ</th>
              <th class="center">G</th>
              <th class="center">E</th>
              <th class="center">P</th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>
        <div class="footer muted">Regla: Victoria = 200 pts ¬∑ Empate = 100 pts ¬∑ Derrota = 0 pts</div>
      </div>
    </section>
  </main>

  <script>
    // ==== Utilidades de almacenamiento ====
    const KEY = 'liga40_v1';
    const defaultTeams = Array.from({length:40}, (_,i)=>({
      id: i+1,
      name: `Equipo ${i+1}`,
      points: 0,
      played: 0,
      win: 0,
      draw: 0,
      loss: 0
    }));

    function loadState(){
      try{
        const raw = localStorage.getItem(KEY);
        if(!raw) return { teams: defaultTeams, history: [] };
        const data = JSON.parse(raw);
        // migrate if needed
        if(!data.history) data.history = [];
        // Ensure 40 entries
        if(!data.teams || data.teams.length !== 40){
          const map = new Map((data.teams||[]).map(t=>[t.id,t]));
          const merged = defaultTeams.map(dt=> ({...dt, ...(map.get(dt.id)||{}) }));
          data.teams = merged;
        }
        return data;
      }catch(e){
        console.warn('Estado corrupto, reiniciando', e);
        return { teams: defaultTeams, history: [] };
      }
    }
    function saveState(){ localStorage.setItem(KEY, JSON.stringify(state)); }

    let state = loadState();

    // ==== Admin simple (PIN) ====
    let isAdmin = false;
    const ADMIN_PIN = 'admin123'; // c√°mbialo si quieres

    const $ = (s)=>document.querySelector(s);
    const teamA = $('#teamA');
    const teamB = $('#teamB');
    const tbody = document.querySelector('#table tbody');
    const historyBox = $('#history');

    function renderSelects(){
      const makeOpts = (selId)=>{
        const sel = selId;
        sel.innerHTML = '';
        state.teams.forEach(t=>{
          const o = document.createElement('option');
          o.value = t.id; o.textContent = t.name; sel.appendChild(o);
        });
      };
      makeOpts(teamA); makeOpts(teamB);
      teamA.selectedIndex = 0; teamB.selectedIndex = 1;
    }

    function renderTable(){
      const sorted = [...state.teams].sort((a,b)=> b.points - a.points || a.name.localeCompare(b.name));
      tbody.innerHTML = '';
      sorted.forEach((t,idx)=>{
        const tr = document.createElement('tr');
        tr.innerHTML = `
          <td class="center">${idx+1}</td>
          <td><button class="name-btn" data-id="${t.id}" title="Click para renombrar">${t.name}</button></td>
          <td class="right">${t.points}</td>
          <td class="center">${t.played}</td>
          <td class="center">${t.win}</td>
          <td class="center">${t.draw}</td>
          <td class="center">${t.loss}</td>`;
        tbody.appendChild(tr);
      });
    }

    function renderHistory(){
      if(!state.history.length){ historyBox.innerHTML = '<span class="muted small">Sin resultados a√∫n.</span>'; return; }
      historyBox.innerHTML = state.history.slice().reverse().map(h=>{
        const a = state.teams.find(t=>t.id===h.a).name;
        const b = state.teams.find(t=>t.id===h.b).name;
        const tag = h.type==='A' ? `Gan√≥ ${a}` : h.type==='B' ? `Gan√≥ ${b}` : 'Empate';
        const when = new Date(h.ts).toLocaleString();
        return `<div class="small">‚Ä¢ ${when}: <strong>${a}</strong> vs <strong>${b}</strong> ‚Äî <span class="muted">${tag}</span></div>`;
      }).join('');
    }

    function validateDifferent(){
      const a = parseInt(teamA.value,10);
      const b = parseInt(teamB.value,10);
      const ok = a !== b;
      [btnAWin, btnBWin, btnDraw].forEach(btn=>{
        btn.disabled = !(ok && isAdmin);
      });
    }

    function applyResult(type){
      const aId = parseInt(teamA.value,10);
      const bId = parseInt(teamB.value,10);
      if(aId===bId) return alert('Debes elegir equipos distintos');
      const A = state.teams.find(t=>t.id===aId);
      const B = state.teams.find(t=>t.id===bId);

      // actualizar PJ
      A.played++; B.played++;
      if(type==='A'){
        A.points += 200; A.win++; B.loss++;
      } else if(type==='B'){
        B.points += 200; B.win++; A.loss++;
      } else { // draw
        A.points += 100; B.points += 100; A.draw++; B.draw++;
      }
      state.history.push({ a:aId, b:bId, type, ts: Date.now() });
      saveState();
      renderTable();
      renderHistory();
    }

    // ==== Eventos ====
    const btnAWin = $('#btnAWin');
    const btnBWin = $('#btnBWin');
    const btnDraw = $('#btnDraw');

    btnAWin.addEventListener('click', ()=>applyResult('A'));
    btnBWin.addEventListener('click', ()=>applyResult('B'));
    btnDraw.addEventListener('click', ()=>applyResult('D'));

    teamA.addEventListener('change', validateDifferent);
    teamB.addEventListener('change', validateDifferent);

    $('#toggleAdmin').addEventListener('click', ()=>{
      if(isAdmin){ isAdmin=false; updateAdminUI(); return; }
      const pin = prompt('PIN de administrador:');
      if(pin===ADMIN_PIN){ isAdmin=true; updateAdminUI(); }
      else alert('PIN incorrecto');
    });

    function updateAdminUI(){
      $('#adminState').textContent = isAdmin ? 'Admin activo' : 'Modo visitante';
      $('#adminState').className = isAdmin ? 'admin-badge' : 'tag';
      validateDifferent();
    }

    // Renombrar equipos (individual, clic en nombre)
    tbody.addEventListener('click', (e)=>{
      const btn = e.target.closest('.name-btn');
      if(!btn) return;
      const id = parseInt(btn.dataset.id,10);
      const t = state.teams.find(x=>x.id===id);
      const name = prompt('Nuevo nombre para el equipo:', t.name);
      if(!name) return;
      t.name = name.trim().slice(0,40) || t.name;
      saveState();
      renderTable();
      renderSelects();
    });

    // Bot√≥n renombrar en masa (lista)
    $('#renameTeams').addEventListener('click', ()=>{
      const list = state.teams.map(t=>t.name).join('\n');
      const msg = 'Edita los nombres, uno por l√≠nea (40 l√≠neas):';
      const edited = prompt(msg, list);
      if(!edited) return;
      const names = edited.split('\n').map(s=>s.trim()).filter((_,i)=> i < 40);
      if(names.length!==40){
        alert('Debes proporcionar exactamente 40 l√≠neas. No se hicieron cambios.');
        return;
      }
      state.teams.forEach((t,i)=> t.name = names[i] || t.name);
      saveState();
      renderTable();
      renderSelects();
    });

    // Exportar / Importar JSON
    $('#exportBtn').addEventListener('click', ()=>{
      const blob = new Blob([JSON.stringify(state,null,2)], {type:'application/json'});
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url; a.download = 'liga40_estado.json'; a.click();
      URL.revokeObjectURL(url);
    });
    $('#importBtn').addEventListener('click', ()=> $('#importFile').click());
    $('#importFile').addEventListener('change', (ev)=>{
      const file = ev.target.files[0]; if(!file) return;
      const reader = new FileReader();
      reader.onload = ()=>{
        try{
          const data = JSON.parse(reader.result);
          if(!data.teams || !Array.isArray(data.teams) || data.teams.length!==40) throw new Error('Formato inv√°lido');
          state = { teams: data.teams, history: Array.isArray(data.history) ? data.history : [] };
          saveState(); renderTable(); renderSelects(); renderHistory();
        }catch(err){ alert('Archivo no v√°lido: ' + err.message); }
      };
      reader.readAsText(file);
    });

    // Reiniciar
    $('#resetBtn').addEventListener('click', ()=>{
      if(!confirm('¬øSeguro que quieres reiniciar todos los puntos e historial?')) return;
      state = { teams: defaultTeams.map(t=>({...t})), history: [] };
      saveState(); renderTable(); renderSelects(); renderHistory();
    });

    // Init
    renderSelects();
    renderTable();
    renderHistory();
    updateAdminUI();
    validateDifferent();
  </script>
</body>
</html>
